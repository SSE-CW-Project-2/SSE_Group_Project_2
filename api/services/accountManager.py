####################################################################################################
# Project Name: Motive Event Management System
# File: accountManager.py
# Description: This file defines functions used to create, update and delete user accounts.
#
# Authors: James Hartley, Ankur Desai, Patrick Borman, Julius Gasson, and Vadim Dunaevskiy
# Date: 2024-02-16
# Version: 1.0
#
# Notes: Currently only checks if an email is in use for accounts of the same type, but should check
#        all account types. Expect the emails to be encrypted when stored on the database.
#           The fetch_account_info function is implemented in a separate file as it is likely to
#        be used more frequently than these functions and need a different scaling solution.
####################################################################################################


from postgrest import APIError
from api.services.accountInfoRetrieval import fetch_account_info
from supabase import create_client, Client
from dotenv import load_dotenv
import os

load_dotenv()

# Supabase project details
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_PRIVATE_KEY")

# Create a Supabase client
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)


def create_account(email: str, account_type: str, name: str):
    """
    Adds a row to the specified Supabase table for the new account, provided that the email is not
    already in use.

    Args:
        email: A string containing the email address the user authenticated with.
        account_type: A string corresponding to the user account type. Must be one of 'venue',
            'artist' or 'attendee'.
        name: The venue, artist or attendee username that will be displayed in the web app.

    Returns: The unique account id generated by Supabase if the account is successfully added to the
        database, or 'None' otherwise.
    """
    # Error checking - should only be called if email not already registered
    # Remove this code later as it is an additional, unnecessary query to the database
    user_id = fetch_account_info(email, account_type)

    if user_id is not None:
        print(f"Account already associated with this email address")
        return None

    # Attempt to create the account
    try:
        response = supabase.table(account_type + "s").insert({"email": email, "name": name}).execute()
        # Check if the insert was successful by checking if data is returned
        if response.data:
            # Return the user_id of the newly created account
            return response.data[0]['user_id']
        else:
            print("An error occurred during account creation.")
            return None
    except APIError as e:
        print(f"An API error occurred: {e.message}")
        return None


def update_account_details(current_email: str, account_type: str, new_email: str = None, new_name: str = None):
    """
    Updates one or more attributes in a row, corresponding to an existing user account.

    Args:
        current_email: A string containing the email address the user authenticated with.
        account_type: A string corresponding to the user account type. Must be one of 'venue',
            'artist' or 'attendee'.
        new_email: A string containing the new desired email address, or blank if it is not to be
            changed.
        new_name: The new venue, artist or attendee username that will be displayed in the web app,
            or left blank if the username is not to be changed.

    Returns: True if the account is updated successfully, else false.
    """
    # Error checking - should only be called if email not already registered
    # Remove this code later as it is an additional, unnecessary query to the database
    user_id = fetch_account_info(current_email, account_type)

    if user_id is None:
        print(f"Cannot find account associated with this id")
        return None

    # Dictionary to hold the fields to update
    update_fields = {}
    if new_email:
        update_fields['email'] = new_email
    if new_name:
        update_fields['name'] = new_name

    # Check that there's at least one field to update
    if not update_fields:
        print("No updates specified.")
        return False

    # Attempt to update the venue
    try:
        response = supabase.table(account_type + "s").update(update_fields).eq("email", current_email).execute()

        # Check if the update was successful
        if response.data:
            # If response.data is not empty, the update operation was successful
            print(f"Venue with ID {user_id} has been updated.")
            return True
        else:
            return False
    except APIError as e:
        print(f"An API error occurred: {e.message}")
        return False


def delete_account(email: str, account_type: str):
    """
    Removes an account information row from the database.

    Args:
        email: A string containing the email address associated with the account.
        account_type: A string corresponding to the user account type. Must be one of 'venue',
            'artist' or 'attendee'.

    Returns: True if the account row is successfully deleted from the database, or false if it is
        not found or not deleted.
    """

    # Attempt to delete the account
    try:
        response = supabase.table(account_type + "s").delete().eq("email", email).execute()

        # Check if the delete operation was successful by inspecting response.data
        if response.data:
            # response.data not empty means rows were deleted
            print(f"Account with email {email} has been deleted.")
            return True
        else:
            # response.data empty could mean no rows found to delete or already deleted
            print(f"No account found with email {email}, or it has already been deleted.")
            return False
    except APIError as e:
        print(f"An API error occurred: {e.message}")
        return False


# # Example usage of create_account
# new_email = 'newvenue@example.com'
# new_name = 'New Venue Name'
# account_type = 'venue'
# new_user_id = create_account(new_email, account_type, new_name)
# if new_user_id is None:
#     print("Account already associated with this email address")
# else:
#     print(f"New venue account created with ID: {new_user_id}")
#
# # Example usage of create_venue_account
# new_email = 'newvenue@example.com'
# new_name = 'New Venue Name'
# account_type = 'venue'
# new_user_id = create_account(new_email, account_type, new_name)
# if new_user_id is None:
#     print("Account already associated with this email address")
# else:
#     print(f"New venue account created with ID: {new_user_id}")
#
# # Example usage of fetch_account_info
# account_type = 'venue'
# email = 'newvenue@example.com'
# user_id = fetch_account_info(email, account_type)
# print(user_id)
# user_id_to_update = user_id
#
# # Example usage of fetch_account_info
# account_type = 'venue'
# email = 'oldvenue@example.com'
# user_id = fetch_account_info(email, account_type)
# print(user_id)
#
# # Example usage of update_account_info:
# account_type = 'venue'
# new_email = 'updatedemail@example.com'
# new_name = 'Updated Venue Name'
# update_account_details(current_email='newvenue@example.com', account_type=account_type,
#                      new_email=new_email, new_name=new_name)
#
# # Example usage of fetch_account_info
# account_type = 'venue'
# email = 'updatedemail@example.com'
# user_id = fetch_account_info(email, account_type)
# print(user_id)
#
# # Example usage of delete_account:
# account_type = 'venue'
# email_to_delete = 'updatedemail@example.com'
# delete_account(email_to_delete, account_type)
#
# # Example usage of delete_account:
# account_type = 'venue'
# email_to_delete = 'updatedemail@example.com'
# delete_account(email_to_delete, account_type)
#
# # Example usage of fetch_account_info
# account_type = 'venue'
# email = 'newvenue@example.com'
# user_id = fetch_account_info(email, account_type)
# print(user_id)