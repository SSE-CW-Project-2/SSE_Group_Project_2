name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  format-checking:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: pip install -r requirements.txt
    - name: Set PYTHONPATH to the api directory
      run: echo "PYTHONPATH=${{ github.workspace }}/api" >> $GITHUB_ENV
    - name: Find all Python files excluding the .venv directory
      run: find . -type f -name "*.py" ! -path "./.venv/*" -print0 > python_files.tmp
    - name: Run flake8 (with adjustments to allow for black's formatting)
      run: xargs -0 flake8 < python_files.tmp --extend-ignore E203  --extend-ignore E722 --max-line-length 120
    - name: Run mypy
      run: |
        xargs -0 mypy --ignore-missing-imports < python_files.tmp
    - name: Clean up
      run: rm -f python_files.tmp
    
  type-checking:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: pip install -r requirements.txt
    - name: Set PYTHONPATH to the api directory
      run: echo "PYTHONPATH=${{ github.workspace }}/api" >> $GITHUB_ENV
    - name: Find all Python files excluding the .venv directory
      run: find . -type f -name "*.py" ! -path "./.venv/*" -print0 > python_files.tmp
    - name: Run mypy
      run: |
        xargs -0 mypy --ignore-missing-imports < python_files.tmp
    - name: Clean up
      run: rm -f python_files.tmp

  testing:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Set environment variables
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      run: |
        echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
        echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> $GITHUB_ENV
    - name: Set PYTHONPATH to the api directory
      run: | 
        echo "PYTHONPATH=${{ github.workspace }}/api" >> $GITHUB_ENV
    - name: Install dependencies
      run: pip install -r requirements.txt
    - name: Run unit tests
      run: | 
        pytest api/tests/unit/routes/*.py
        pytest api/tests/unit/models/*.py
        pytest api/tests/unit/utils/*.py
  
  container-setup:
    runs-on: ubuntu-latest
    needs: [type-checking, format-checking, testing]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Login to Google Container Registry
      uses: google-github-actions/setup-gcloud@v2.1.0
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2.1.0
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    - name: Set up Google Cloud
      uses: google-github-actions/setup-gcloud@v2.1.0
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
    - name: Confirm Google Cloud Authentication
      run: gcloud auth list
    - name: Build and push Docker image to GCR
      run: |
        gcloud auth configure-docker --project=${{ secrets.GCP_PROJECT_ID }}
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/sse-main-app:$GITHUB_SHA .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/sse-main-app:$GITHUB_SHA  
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: container-setup
    environment: Staging
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.0
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Google Cloud
        uses: google-github-actions/setup-gcloud@v2.1.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
          
      - name: Confirm Google Cloud Authentication
        run: gcloud auth list

      - name: List Image Tags and Details in GCR
        run: gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/sse-main-app

      - name: Deploy to Google Cloud Run
        run: |
          gcloud run deploy sse-main-app-staging \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/sse-main-app:$GITHUB_SHA \
            --platform managed \
            --region europe-west2 \
            --port 5000 \
            --set-env-vars PRIVATE_KEY="${{ secrets.PRIVATE_KEY }}" \
            --set-env-vars FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

  optional-integration-testing:
    runs-on: ubuntu-latest
    environment: Integration_test
    needs: deploy-to-staging 
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pipenv
        pipenv install
    
    - name: Prepare Selenium
      uses: nanasess/setup-chromedriver@master
    
    - name: Start XVFB
      run: Xvfb :99 &
    
    - name: Run tests
      run: |
        pipenv run python api/tests/integration/ui_test.py -v 2
      env:
        DISPLAY: :99
        STAGING_URL: ${{ secrets.STAGING_URL }}

  deploy-to-production:
    runs-on: ubuntu-latest
    environment: Production
    needs: deploy-to-staging
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.0
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Google Cloud
        uses: google-github-actions/setup-gcloud@v2.1.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
          
      - name: Confirm Google Cloud Authentication
        run: gcloud auth list

      - name: List Image Tags and Details in GCR
        run: gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/sse-main-app

      - name: Deploy to Google Cloud Run
        run: |
          gcloud run deploy sse-main-app \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/sse-main-app:$GITHUB_SHA \
            --platform managed \
            --region europe-west2 \
            --port 5000 \
            --set-env-vars PRIVATE_KEY="${{ secrets.PRIVATE_KEY }}" \
            --set-env-vars FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    
    
